"""Набор исключений применимых в системе и вызывающихся по ходу ее работы.

Поскольку каждая ошибка-исключение, но не каждое исключение-ошибка - в рамках химеры предпринята попытка стандартизировать ответ
возвращаемый клиенту, независимо от происходящего внутри системы.
Это значит что и фатальная ошибка и ожидаемый результат и допустимый результат (при передаче пороговых или запредельных значений в
обработчики) должны возвращать один и тот же, по своей структуре, результат.

"""
from system.utils.result import ResultMessage


class ChimeraException(Exception):
    """Базовый класс исключений для системы.

    :type message: str Текст при выводе исключения;
    """

    message = None

    def __init__(self, message: str):
        """Инициализация базового класса исключений.

        :param message: Текст для сообщения в исключении;
        :type message: str
        """

        self.message = message

    def __str__(self):
        """Базовый вывод текста исключения."""
        return str(self.message)


class Result(ChimeraException):
    """Базовое исключение для вывода результата работы обработчиков.

    Возбуждение этого исключения и его наследников должно свидетельствовать о корректном завершении работы над запросом
    (даже если нельзя считать его удачным).

    """

    def __init__(self, *args, **kwargs):
        """Перекрытие инициализации для предачи аргументов в объект ResultMessage.

        Инициализация отличается от родительской тем что в качестве результирующего сообщения будет задан объект ResultMessage
        с результатом работы системы, при этом перевод в строку должен отрабатываться корректно поскольку вывод будет идти в виде json.

        :param error:
        :type error: str
        :param content:
        :type content: dict
        """
        self.message = ResultMessage(*args, **kwargs)


class ErrorResult(Result):
    """Ошибка при работе обработчиков."""


class NotFound(ErrorResult):
    """Запрошенного контента в системе не найдено."""
